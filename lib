 daaa


package DP;

import java.util.Arrays;

public class _0_1_knapsack {


    public static int knapsakc(int val[],int wt[],int w,int n){
        if(w==0||n==0){
            return 0;
        }

        if(wt[n-1]<=w){
            //valid

            //include
            int ans1=val[n-1]+knapsakc(val,wt,w-wt[n-1],n-1);

            //exlcude
            int ans2=knapsakc(val,wt,w,n-1);
            return Math.max(ans1,ans2);

        }
        else{
            //not valid
            return knapsakc(val,wt,w,n-1);

        }


    }
    public static int knapsakc_memorization(int val[],int wt[],int w,int n,int dp[][]){
        if(w==0||n==0){
            return 0;
        }


        if(dp[n][w]!=-1){
            return dp[n][w];
        }
        if(wt[n-1]<=w){
            //valid

            //include
            int ans1=val[n-1]+knapsakc_memorization(val,wt,w-wt[n-1],n-1,dp);

            //exlcude
            int ans2=knapsakc_memorization(val,wt,w,n-1,dp);
            dp[n][w]= Math.max(ans1,ans2);
            return dp[n][w];

        }
        else{
            //not valid
            dp[n][w]= knapsakc_memorization(val,wt,w,n-1,dp);
            return dp[n][w];

        }


    }



    static int knapsack_Tab(int val[],int wt[],int w){
        int n=val.length;

        int dp[][]=new int[n+1][w+1];
        for (int i = 0; i < dp.length; i++) {
            dp[i][0] = 0;
        }
        for (int j = 0; j < dp[0].length; j++) {
            dp[0][j] = 0;
        }


        for(int i=1;i<n+1;i++){
            for(int j=1;j<w+1;j++){
                int v=val[i-1];
                int Wei=wt[i-1];

                if(Wei<=j){
                    //valid
                    int include=v+dp[i-1][j-Wei];
                    int exclue=dp[i-1][j];
                    dp[i][j]=Math.max(include,exclue);
                }
                else{
                    int exclude=dp[i-1][j];
                    dp[i][j]=exclude;
                }

            }
        }
        return dp[n][w];



    }

    public static void main(String[] args) {
        int val[]={15,14,10,45,30};
        int wt[]={2,5,1,3,4};
        int w=7;

        int dp[][]=new int[val.length+1][w+1];

        for (int i=0;i<dp.length;i++){
            for(int j=0;j<dp[0].length;j++){
                dp[i][j]=-1;
            }
        }

//        System.out.println(knapsakc_memorization(val,wt,w, val.length,dp));
        System.out.println(knapsack_Tab(val,wt,w));
    }

}





bt



// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.5.0 < 0.9.0;
contract bank{

    int depmoney;
    int withdaw_trans;
    int balence;

    address public owner;

    constructor() public {
      owner=msg.sender;
    }

    modifier onlyowner(){
          require(msg.sender==owner,"only the owner can call this function");
          _;
    }

    function withdrow(int amount)public onlyowner{
        if(depmoney>amount){
        withdaw_trans=amount;
        depmoney=depmoney-amount;
        }
    }

    function deposit(int amount) public payable {
        depmoney=amount;

    }

    function getbalence() public  view returns(int){
        return  depmoney;
        
    }


    

}
